apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    task.output.location: logs
    task.results.container: step-report-json
    task.results.format: application/json
    task.results.type: ec
    tekton.dev/displayName: Verify Enterprise Contract
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 'ec, chains, signature, conftest'
  name: verify-enterprise-contract
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: Verify the enterprise contract is met
  params:
    - name: IMAGE
      type: string
    - name: COMPONENT_ID
      type: string
    - default: enterprise-contract-service/default
      description: |
        Name of the policy configuration (EnterpriseContractPolicy
        resource) to use. `namespace/name` or `name` syntax supported. If
        namespace is omitted the namespace where the task runs is used.
      name: POLICY_CONFIGURATION
      type: string
    - default: 'false'
      description: Skip Rekor transparency log checks during validation.
      name: IGNORE_REKOR
      type: string
    - default: ''
      description: TUF mirror URL. Provide a value when NOT using public sigstore deployment.
      name: TUF_MIRROR
      type: string
    - default: ''
      description: |
        Path to a directory containing SSL certs to be used when communicating
        with external services. This is useful when using the integrated registry
        and a local instance of Rekor on a development cluster which may use
        certificates issued by a not-commonly trusted root CA. In such cases,
        "/var/run/secrets/kubernetes.io/serviceaccount" is a good value. Multiple
        paths can be provided by using the ":" separator.
      name: SSL_CERT_DIR
      type: string
    - default: 'true'
      description: Include rule titles and descriptions in the output. Set to "false" to disable it.
      name: INFO
      type: string
    - default: 'true'
      description: Fail the task if policy fails. Set to "false" to disable it.
      name: STRICT
      type: string
    - default: /tekton/home
      description: Value for the HOME environment variable.
      name: HOMEDIR
      type: string
    - default: now
      description: Run policy checks with the provided time.
      name: EFFECTIVE_TIME
      type: string
    - default: 'https://rekor.sigstore.dev'
      description: Rekor host for transparency log lookups
      name: REKOR_HOST
      type: string
  results:
    - description: Short summary of the policy evaluation for each image
      name: TEST_OUTPUT
      type: string
  stepTemplate:
    computeResources: {}
    env:
      - name: HOME
        value: $(params.HOMEDIR)
  steps:
    - args:
        - oc get secret signing-secrets -n openshift-pipelines -o json > /workspace/signing-secrets
      command:
        - /bin/bash
        - '-c'
      computeResources: {}
      image: 'quay.io/openshift/origin-cli:latest'
      name: extract-signing-secret
    - computeResources: {}
      image: quay.io/redhat-gpte/jq
      name: extract-cosign-public-key
      script: |
        set +x
        cat /workspace/signing-secrets | jq -r '.data."cosign.pub"' | base64 --decode > /workspace/cosign.pub
        cat /workspace/cosign.pub
    - args:
        - version
      command:
        - ec
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: version
    - computeResources: {}
      env:
        - name: TUF_MIRROR
          value: $(params.TUF_MIRROR)
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: initialize-tuf
      script: |-
        set -euo pipefail

        if [[ -z "${TUF_MIRROR:-}" ]]; then
            echo 'TUF_MIRROR not set. Skipping TUF root initialization.'
            exit
        fi

        echo 'Initializing TUF root...'
        cosign initialize --mirror "${TUF_MIRROR}" --root "${TUF_MIRROR}/root.json"
        echo 'Done!'
    - args:
        - validate
        - image
        - '--verbose'
        - '--image'
        - $(params.IMAGE)
        - '--policy'
        - $(params.POLICY_CONFIGURATION)
        - '--public-key'
        - /workspace/cosign.pub
        - '--rekor-url'
        - $(params.REKOR_HOST)
        - '--ignore-rekor=$(params.IGNORE_REKOR)'
        - '--info=$(params.INFO)'
        - '--strict=false'
        - '--show-successes'
        - '--effective-time=$(params.EFFECTIVE_TIME)'
        - '--output'
        - yaml=$(params.HOMEDIR)/report.yaml
        - '--output'
        - appstudio=$(results.TEST_OUTPUT.path)
        - '--output'
        - data=$(params.HOMEDIR)/data.yaml
        - '--output'
        - attestation=$(params.HOMEDIR)/attestations.jsonl
        - '--output'
        - json=$(params.HOMEDIR)/report-json.json
      command:
        - ec
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: validate
      volumeMounts:
        - mountPath: $(params.HOMEDIR)/.docker
          name: docker-config
    - args:
        - $(params.HOMEDIR)/report.yaml
      command:
        - cat
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: report
    - args:
        - $(params.HOMEDIR)/data.yaml
      command:
        - cat
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: data
    - args:
        - $(params.HOMEDIR)/attestations.jsonl
      command:
        - cat
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: attestations
    - args:
        - $(params.HOMEDIR)/report-json.json
      command:
        - cat
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: report-json
    - args:
        - .
        - $(results.TEST_OUTPUT.path)
      command:
        - jq
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: summary
    - args:
        - '--argjson'
        - strict
        - $(params.STRICT)
        - '-e'
        - |
          .result == "SUCCESS" or .result == "WARNING" or ($strict | not)
        - $(results.TEST_OUTPUT.path)
      command:
        - jq
      computeResources: {}
      image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0'
      name: assert
  volumes:
    - name: docker-config
      secret:
        items:
          - key: .dockerconfigjson
            path: config.json
        secretName: $(params.COMPONENT_ID)-docker-config
  workspaces:
    - description: The workspace where the snapshot spec json file resides
      name: data
      optional: true
